1. WSGI (Web server Gateway Interface)
웹 서버 게이트웨이 인터페이스(WSGI, Web Server Gateway Interface)
웹서버와 웹 애플리케이션의 인터페이스를 위한 파이썬 프레임워크다.

runserver는 개발용이므로 실제 서비스를 운영하는데 부적합하기 때문에 실제로 어플리케이션을 서비스할 때는 웹서버를 사용하게 된다.
기존의 파이선 웹 애플리케이션 프레임워크는 웹서버를 선택하는데 있어서 제약이 있었다. 
보통 CGI, FastCGI, mod_python 과 같은 커스텀API 중에 하나만 사용할 수 있도록 디자인 되었는데, 
WSGI는 그에 반하여 low-level로 만들어져서 웹서버와 웹 애플리케이션, 프레임워크간의 벽을 허물었다.

WSGI는 장고와 웹서버를 연결해주는 역할을 하는 Python 프레임워크이다. 프로토콜 개념으로도 이해할 수 있다.
웹서버가 직접적으로 Python으로 된 장고와 통신할 수 없기 때문에 그 사이에서 WSGI Server(middleware)가 실행되어 웹서버와 장고를 연결해준다. 
웹서버가 전달받은 사용자의 요청을 WSGI Server에서 처리하여 Django로 넘겨주고, 다시 Django가 넘겨준 응답을 WSGI Server가 받아서 웹서버에 전달한다.
WSGI Server에는 여러 가지 종류가 있는데, 그 중 기능이 강력하고 확장성이 뛰어난 uWSGI를 사용했다.
사용자 <-> 웹서버 <-> WSGI Server <-> Django

2. Nginx(엔진 x)-웹 서버용 오픈 소스 소프트웨어
사용자가 보낸 http 요청을 uWSGI가 받아 장고에 넘겨주고 장고는 요청을 처리하여 적절한 응답을 uWSGI로 보내면 uWSGI가 다시 사용자에게 응답을 돌려주는 구조이다.
하지만 보통은 사용자의 브라우저가 직접 uWSGI에 요청을 보내지 않는다. 이 요청을 받는 역할을 하는 것이 웹서버이다.(Nginx)
사용자 <-> Nginx 웹서버 <-> uWSGI <-> Django

웹 서버는 HTTP(port:80)를 통해 웹브라우저에서 요청하는 HTML 문서나 오브젝트를 전송해주는 서비스 프로그램.

웹 서버의 주된 기능은 웹 페이지를 클라이언트로 전달하는 것. 주로 그림, css, 자바 스크립트를 포함한 HTML문서가 클라이언트로 전달
클라이언트로부터 콘텐츠를 전달 받는 것도 웹 서버의 기능에 속한다.

반드시 Nginx와 같이 써야 하는 것은 아니다 uWSGI만으로도 Server를 제공하는 것이 가능하다 하지만 Nginx와 같이 사용하므로서 
얻는 이득중 가장 큰 장점은 Nginx가 가진 보다 향상된 Static Content(CSS,Javascript등)핸들링을 통해서 서버에 발생되는 Load를 줄일 수 있다.

3. AWS EC2(Amazon Elastic Compute Cloud)
사용자가 가상 컴퓨터를 임대 받아 그 위에 자신만의 컴퓨터 애플리케이션들을 실행할 수 있게 한다.
- 사용자는 필요하면 서버 인스턴스를 만들고 시작하고 종료할 수 있으며, 실행 중인 서버에 대해 시간 당 지불하므로 "일래스틱"(elastic, 탄력적인)이라는 용어를 사용하게 된다.

4. AWS RDS(Amazon Relational Database Service) 
아마존 웹 서비스(AWS)가 서비스하는 분산 관계형 데이터베이스이다.
- 애플리케이션 내에서 관계형 데이터베이스의 설정, 운영, 스케일링을 단순케 하도록 설계된 클라우드 내에서 동작하는 웹 서비스이다.
- 데이터베이스 소프트웨어를 패치하거나 데이터베이스를 백업하거나 시점 복구를 활성화하는 것과 같은 복잡한 관리 프로세스들은 자동으로 관리된다.
- 스토리지와 연산 자원들을 스케일링하는 것은 하나의 API 호출로 수행할 수 있다.

*생각해 볼 부분
1. EC2 에 DB를 직접 설치하여 서비스하는 것과 RDS를 이용해 서비스 하는 것의 차이는?
- EC2는 내가 직접 리눅스 위에 사용하려는 DB(oracle,maria db, postgresql등)를 설치하고 그위에 서비스하는 것이고 
RDS는 EC2와 함께 사용하며 아마존에서 DB의 설정, 운영, 백업 등의 기능을 편하게 이용할 수 있게 해주는 EC2와 분리된 DB전용서버이다
즉.. RDS를 사용하면 내야하는 돈이 많아지므로, 테스트/개발을 하는 개발자라면... RDS는 이런거구나..하고 알아두고!
EC2에 직접 설치하고 사용하는게 좋을것 같다, 물론 이렇게 직접설치하고 설정/백업등을 한다면 공부도 더 되고 좋으니 1석2조


