django 배포 + Nginx + uWSGI

ㅇ추가한 유저명: deploy
ㅇuwsgi 가상환경: uwsgi-env

ㅇdjango가상환경: django

-----------------<장고프로젝트마다 개별설정 해야하는부분>------------------------------------------------------------------------------------------------------
ㅇuWSGI로 서버 열어보기
uwsgi --http :9000 --home /home/ubuntu/.pyenv/versions/django  --chdir /srv/django1/mysite -w mysite.wsgi
	[포트번호]	[virtualenv경로]			    [manage.py위치경로]	    [wsgi모듈명]
 그리고나서 9000 포트로 접속해보자.

ㅇini 파일로 uWSGI 실행하기
1. django 폴더 안에 .config폴더 생성
2. .config폴더 안에 uwsgi폴더 생성
3. uwsgi 폴더 안에 mysite.ini 파일 생성

django
├── .config
│   └── uwsgi
│       └── mysite.ini

4. sudo vi mysite.ini
[uwsgi]

# [manage.py 위치경로]
chdir = /srv/django1/mysite 
#[wsgi모듈명:mysite.wsgi] 
module = mysite.wsgi:application 
#[virtualenv경로]
home = /home/ubuntu/.pyenv/versions/django 

uid = deploy
gid = deploy

http = :9000 # [포트번호]

enable-threads = true
master = true
vacuum = true
pidfile = /tmp/mysite.pid
logto = /var/log/uwsgi/mysite/@(exec://date +%%Y-%%m-%%d).log
log-reopen = true

5. uWSGI를 실행하기 전에 mysite.ini 파일에 설정해주었던 logto 옵션의 디렉토리를 직접 생성
sudo mkdir -p /var/log/uwsgi/mysite

6. ini 파일로 uWSGI를 실행
sudo /home/ubuntu/.pyenv/versions/uwsgi-env/bin/uwsgi -i /srv/django1/.config/uwsgi/mysite.ini

ㅇ Nginx 환경 설정
-Nginx 설정 파일 생성 및 연결
1. .config폴더에 nginx 폴더 생성
2. nginx폴더에 mysite.conf 파일 생성
.config
├── nginx
│   └── mysite.conf
└── uwsgi
    └── mysite.ini
3. sudo vi mysite.conf
server {
    listen 80;
    server_name *.compute.amazonaws.com;
    charset utf-8;
    client_max_body_size 128M;

    location / {
        uwsgi_pass  unix:///tmp/mysite.sock;
        include     uwsgi_params;
    }
}

4.mysite.conf 파일을 /etc/nginx/sites-available/ 경로에 복사
sudo cp -f /srv/django1/.config/nginx/mysite.conf /etc/nginx/sites-available/mysite.conf

5. sites-available 에 있는 설정파일을 sites-enabled 폴더에 링크
sudo ln -sf /etc/nginx/sites-available/mysite.conf /etc/nginx/sites-enabled/mysite.conf


6. sites-enabled 폴더의 default 링크는 삭제해준다.

ㅇ uWSGI 설정
- Nginx를 설치했으니 uWSGI를 Nginx와 통신하도록 설정해준다.
=>uWSGI 백그라운드 실행

1. .config/uwsgi/ 에 uwsgi.service 파일을 생성
.config
├── nginx
│   └── mysite.conf
└── uwsgi
    ├── uwsgi.service
    └── mysite.ini
2. sudo vi uwsgi.service
[Unit]
Description=uWSGI service
After=syslog.target

[Service]
ExecPre=/bin/sh -c 'mkdir -p /run/uwsgi; chown deploy:deploy /run/uwsgi'
ExecStart=/home/ubuntu/.pyenv/versions/uwsgi-env/bin/uwsgi -i /srv/django1/.config/uwsgi/mysite.ini

Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target

3. 리부팅 시 자동으로 실행되도록 설정
# 실행
> sudo systemctl start uwsgi.service
> sudo systemctl enable uwsgi
# 상태확인
> systemctl status uwsgi

4. uwsgi.service 파일을 /etc/systemd/system/ 에 하드링크를 걸어준다.
sudo ln -f /srv/django1/.config/uwsgi/uwsgi.service /etc/systemd/system/uwsgi.service

5. 파일을 연결해준 뒤 아래 명령을 실행해서 데몬을 리로드 해준다.
sudo systemctl daemon-reload

6. 그 다음 아래 명령어로 uwsgi 데몬을 활성화 해준다.
sudo systemctl enable uwsgi

7. 백그라운드에서 실행중인 프로그램을 확인
sudo systemctl | grep nginx
sudo systemctl | grep uwsgi

8. 소켓 통신 설정
로컬에서 mysite.ini 파일을 열어 http = :8080 을 삭제하고 그 부분에 아래와 같이 추가한다.

socket = /tmp/mysite.sock
chmod-socket = 666
chown-socket = deploy:deploy

9. 서버에서 데몬 리로드로 다시 불러와주고, Nginx와 uWSGI를 재부팅해준다.

sudo systemctl daemon-reload
sudo systemctl restart nginx uwsgi

10. AWS 서버 설정
http 80번 포트 개방